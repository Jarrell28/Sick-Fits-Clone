{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport styled from \"styled-components\";\nimport { loadStripe } from '@stripe/stripe-js';\nimport { CardElement, Elements, useElements, useStripe } from \"@stripe/react-stripe-js\";\nimport SickButton from './styles/SickButton';\nimport { useState } from \"react\";\nimport nProgress from \"nprogress\";\nimport gql from \"graphql-tag\";\nimport { useMutation } from \"@apollo/client\";\nimport { useRouter } from \"next/dist/client/router\";\nimport { useCart } from \"../lib/cartState\";\nimport { CURRENT_USER_QUERY } from \"./User\";\nconst CheckoutFormStyles = styled.form.withConfig({\n  displayName: \"Checkout__CheckoutFormStyles\",\n  componentId: \"sc-10mtoy5-0\"\n})([\"box-shadow:0 1px 2px 2px rgba(0,0,0,0.4);border:1px solid rgba(0,0,0,.06);border-radius:5px;padding:1rem;display:grid;grid-gap:1rem;\"]); //Query to pass token to backend stripe funcitonality\n\nconst CREATE_ORDER_MUTATION = gql`\n    mutation CREATE_ORDER_MUTATION($token: String!) {\n        checkout(token: $token){\n            id\n            charge\n            total\n            items {\n                id\n                name\n            }\n        }\n    }\n`; //Using Stripe library to perform live transactions\n//Loading stripe functionality\n\nconst stripeLib = loadStripe(process.env.NEXT_PUBLIC_STRIPE_KEY); //Checkout Form\n\nfunction CheckoutForm() {\n  const {\n    0: error,\n    1: setError\n  } = useState(false);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false); //Loading stripe method\n\n  const stripe = useStripe(); //stripe api card elements\n\n  const elements = useElements(); //Using query to pass token\n\n  const [checkout, {\n    error: graphQLError\n  }] = useMutation(CREATE_ORDER_MUTATION, {\n    refetchQueries: [{\n      query: CURRENT_USER_QUERY\n    }]\n  });\n  const router = useRouter();\n  const {\n    closeCart\n  } = useCart();\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    setLoading(true); //Indicate page loading animation\n\n    nProgress.start(); //Creating stripe payment method, will return error or success token\n\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: elements.getElement(CardElement)\n    });\n    console.log(paymentMethod);\n\n    if (error) {\n      setError(error);\n      nProgress.done();\n      return;\n    } //Passing token to backend stripe functionality\n\n\n    const order = await checkout({\n      variables: {\n        token: paymentMethod.id\n      }\n    }); //Redirecting page to order complete\n\n    router.push({\n      pathname: '/order/[id]',\n      query: {\n        id: order.data.checkout.id\n      }\n    }); //Loading completed, ending transition animation\n\n    closeCart();\n    setLoading(false);\n    nProgress.done();\n  }\n\n  return /*#__PURE__*/_jsxs(CheckoutFormStyles, {\n    onSubmit: handleSubmit,\n    children: [error && /*#__PURE__*/_jsx(\"p\", {\n      children: error.message\n    }), graphQLError && /*#__PURE__*/_jsx(\"p\", {\n      children: graphQLError.message\n    }), /*#__PURE__*/_jsx(CardElement, {}), /*#__PURE__*/_jsx(SickButton, {\n      children: \"Checkout Now\"\n    })]\n  });\n} //Component containing stripe provider wrapper\n//Have it separately in order for Checkout Form to use useStripe() method\n\n\nfunction Checkout() {\n  return /*#__PURE__*/_jsx(Elements, {\n    stripe: stripeLib,\n    children: /*#__PURE__*/_jsx(CheckoutForm, {})\n  });\n}\n\nexport { Checkout };","map":null,"metadata":{},"sourceType":"module"}