{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport NProgress from 'nprogress';\nimport Page from \"../components/Page\";\nimport Router from 'next/router';\nimport withData from '../lib/withData';\nimport { CartStateProvider } from '../lib/cartState'; //NPProgress is for the loader when changing pages\n\nRouter.events.on('routeChangeStart', () => NProgress.start());\nRouter.events.on('routeChangeComplete', () => NProgress.done());\nRouter.events.on('routeChangeError', () => NProgress.done()); // TODO: Swap with own css\n\nimport '../components/styles/nprogress.css'; //Wrap component in ApolloProvider \n\nimport { ApolloProvider } from '@apollo/client';\n\nfunction myApp({\n  Component,\n  pageProps,\n  apollo\n}) {\n  return /*#__PURE__*/_jsx(ApolloProvider, {\n    client: apollo,\n    children: /*#__PURE__*/_jsx(CartStateProvider, {\n      children: /*#__PURE__*/_jsx(Page, {\n        children: /*#__PURE__*/_jsx(Component, _objectSpread({}, pageProps))\n      })\n    })\n  });\n}\n\nmyApp.getInitialProps = async function ({\n  Component,\n  ctx\n}) {\n  let pageProps = {};\n\n  if (Component.getInitialProps) {\n    pageProps = await Component.getInitialProps(ctx);\n  }\n\n  pageProps.query = ctx.query;\n  return {\n    pageProps\n  };\n};\n\nexport default withData(myApp);","map":null,"metadata":{},"sourceType":"module"}