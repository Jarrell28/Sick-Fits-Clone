{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _taggedTemplateLiteral from \"C:/projects/AdvancedReact/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query ALL_PRODUCTS_QUERY($skip: Int = 0, $first: Int){\\n        allProducts(first: $first, skip: $skip) {\\n            id\\n            name\\n            price\\n            description\\n            photo {\\n            id\\n            image {\\n                publicUrlTransformed\\n            }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport styled from \"styled-components\";\nimport { perPage } from \"../config\";\nimport Product from \"./Product\"; //skip and first variables are used for pagination\n//skips a number of products that matches the page\n//first is the number of products to display on the page\n\nexport var ALL_PRODUCTS_QUERY = gql(_templateObject());\nvar ProductsList = styled.div.withConfig({\n  displayName: \"Products__ProductsList\",\n  componentId: \"sc-1uv5x8m-0\"\n})([\"display:grid;grid-template-columns:1fr 1fr;grid-gap:60px;\"]); //Component that displays number of products per page\n//Receives the page number via url query argument\n\nexport default function Products(_ref) {\n  var page = _ref.page;\n\n  var _useQuery = useQuery(ALL_PRODUCTS_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage\n    }\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading;\n\n  if (loading) return /*#__PURE__*/_jsx(\"p\", {\n    children: \"Loading...\"\n  });\n  if (error) return /*#__PURE__*/_jsxs(\"p\", {\n    children: [\"Error: \", error.message]\n  });\n  return /*#__PURE__*/_jsx(\"div\", {\n    children: /*#__PURE__*/_jsx(ProductsList, {\n      children: data === null || data === void 0 ? void 0 : data.allProducts.map(function (product) {\n        return /*#__PURE__*/_jsx(Product, {\n          product: product\n        }, product.id);\n      })\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}