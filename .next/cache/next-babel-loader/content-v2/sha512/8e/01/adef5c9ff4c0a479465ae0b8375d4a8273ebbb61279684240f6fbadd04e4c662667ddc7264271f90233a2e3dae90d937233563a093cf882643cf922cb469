{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\projects\\\\AdvancedReact\\\\frontend\\\\components\\\\SingleProduct.js\";\n//Component to render the Single Product\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport DisplayError from './ErrorMessage';\nimport Head from 'next/head';\nimport styled from 'styled-components'; //Single Product Styled Component\n\nconst ProductStyles = styled.div.withConfig({\n  displayName: \"SingleProduct__ProductStyles\",\n  componentId: \"sc-1kapz8w-0\"\n})([\"display:grid;grid-auto-columns:1fr;grid-auto-flow:column;max-width:var(--maxWidth);align-items:top;grid-gap:2rem;justify-content:center;img{width:100%;object-fit:contain;}\"]); //Query to receive the single product using the id from the URL query\n\nconst SINGLE_ITEM_QUERY = gql`\n    query SINGLE_ITEM_QUERY($id : ID!){\n        Product(where: { id: $id}) {\n            name\n            price\n            description\n            id\n            photo {\n                image {\n                    publicUrlTransformed\n                }\n                altText\n            }\n        }\n    }\n\n`; //We pull the id from product/[id].js and pass the id to the graph ql quer\n\nexport default function SingleProduct({\n  id\n}) {\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(SINGLE_ITEM_QUERY, {\n    variables: {\n      id: id\n    }\n  });\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(DisplayError, {\n    error: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(ProductStyles, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: [\"Sick Fits | \", data.Product.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: data.Product.photo.image.publicUrlTransformed,\n      alt: data.Product.photo.altText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"details\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: data.Product.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: data.Product.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["C:/projects/AdvancedReact/frontend/components/SingleProduct.js"],"names":["gql","useQuery","DisplayError","Head","styled","ProductStyles","div","SINGLE_ITEM_QUERY","SingleProduct","id","data","loading","error","variables","Product","name","photo","image","publicUrlTransformed","altText","description"],"mappings":";;AAAA;AAEA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,mBAAnB,C,CAEA;;AACA,MAAMC,aAAa,GAAGD,MAAM,CAACE,GAAV;AAAA;AAAA;AAAA,mLAAnB,C,CAeA;;AACA,MAAMC,iBAAiB,GAAGP,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAhBA,C,CAkBA;;AACA,eAAe,SAASQ,aAAT,CAAuB;AAAEC,EAAAA;AAAF,CAAvB,EAA+B;AAC1C,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2BX,QAAQ,CAACM,iBAAD,EAAoB;AACzDM,IAAAA,SAAS,EAAE;AACPJ,MAAAA,EAAE,EAAEA;AADG;AAD8C,GAApB,CAAzC;AAMA,MAAIE,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO,QAAC,YAAD;AAAc,IAAA,KAAK,EAAEA;AAArB;AAAA;AAAA;AAAA;AAAA,UAAP;AAEX,sBACI,QAAC,aAAD;AAAA,4BAEI,QAAC,IAAD;AAAA,6BACI;AAAA,mCAAoBF,IAAI,CAACI,OAAL,CAAaC,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAFJ,eAKI;AAAK,MAAA,GAAG,EAAEL,IAAI,CAACI,OAAL,CAAaE,KAAb,CAAmBC,KAAnB,CAAyBC,oBAAnC;AAAyD,MAAA,GAAG,EAAER,IAAI,CAACI,OAAL,CAAaE,KAAb,CAAmBG;AAAjF;AAAA;AAAA;AAAA;AAAA,YALJ,eAMI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACI;AAAA,kBAAKT,IAAI,CAACI,OAAL,CAAaC;AAAlB;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,kBAAIL,IAAI,CAACI,OAAL,CAAaM;AAAjB;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH","sourcesContent":["//Component to render the Single Product\r\n\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@apollo/client';\r\nimport DisplayError from './ErrorMessage';\r\nimport Head from 'next/head';\r\nimport styled from 'styled-components';\r\n\r\n//Single Product Styled Component\r\nconst ProductStyles = styled.div`\r\n    display: grid;\r\n    grid-auto-columns: 1fr;\r\n    grid-auto-flow: column;\r\n    max-width: var(--maxWidth);\r\n    align-items: top;\r\n    grid-gap: 2rem;\r\n    justify-content: center;\r\n\r\n    img {\r\n        width: 100%;\r\n        object-fit: contain;\r\n    }\r\n`\r\n\r\n//Query to receive the single product using the id from the URL query\r\nconst SINGLE_ITEM_QUERY = gql`\r\n    query SINGLE_ITEM_QUERY($id : ID!){\r\n        Product(where: { id: $id}) {\r\n            name\r\n            price\r\n            description\r\n            id\r\n            photo {\r\n                image {\r\n                    publicUrlTransformed\r\n                }\r\n                altText\r\n            }\r\n        }\r\n    }\r\n\r\n`\r\n\r\n//We pull the id from product/[id].js and pass the id to the graph ql quer\r\nexport default function SingleProduct({ id }) {\r\n    const { data, loading, error } = useQuery(SINGLE_ITEM_QUERY, {\r\n        variables: {\r\n            id: id\r\n        }\r\n    })\r\n\r\n    if (loading) return <p>loading...</p>\r\n    if (error) return <DisplayError error={error} />\r\n\r\n    return (\r\n        <ProductStyles>\r\n            {/* Next.JS Head component allows you to create custom html Head attributes */}\r\n            <Head>\r\n                <title>Sick Fits | {data.Product.name}</title>\r\n            </Head>\r\n            <img src={data.Product.photo.image.publicUrlTransformed} alt={data.Product.photo.altText} />\r\n            <div className=\"details\">\r\n                <h2>{data.Product.name}</h2>\r\n                <p>{data.Product.description}</p>\r\n            </div>\r\n        </ProductStyles>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}