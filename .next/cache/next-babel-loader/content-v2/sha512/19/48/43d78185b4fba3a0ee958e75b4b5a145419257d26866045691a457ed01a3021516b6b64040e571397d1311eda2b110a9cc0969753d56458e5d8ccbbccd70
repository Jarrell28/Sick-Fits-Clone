{"ast":null,"code":"import _regeneratorRuntime from \"C:/projects/AdvancedReact/frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _asyncToGenerator from \"C:/projects/AdvancedReact/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:/projects/AdvancedReact/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"C:/projects/AdvancedReact/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"C:\\\\projects\\\\AdvancedReact\\\\frontend\\\\components\\\\Checkout.js\",\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation CREATE_ORDER_MUTATION($token: String!) {\\n        checkout(token: $token){\\n            id\\n            charge\\n            total\\n            items {\\n                id\\n                name\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport styled from \"styled-components\";\nimport { loadStripe } from '@stripe/stripe-js';\nimport { CardElement, Elements, useElements, useStripe } from \"@stripe/react-stripe-js\";\nimport SickButton from './styles/SickButton';\nimport { useState } from \"react\";\nimport nProgress from \"nprogress\";\nimport gql from \"graphql-tag\";\nimport { useMutation } from \"@apollo/client\";\nimport { useRouter } from \"next/dist/client/router\";\nimport { useCart } from \"../lib/cartState\";\nimport { CURRENT_USER_QUERY } from \"./User\";\nvar CheckoutFormStyles = styled.form.withConfig({\n  displayName: \"Checkout__CheckoutFormStyles\",\n  componentId: \"sc-10mtoy5-0\"\n})([\"box-shadow:0 1px 2px 2px rgba(0,0,0,0.4);border:1px solid rgba(0,0,0,.06);border-radius:5px;padding:1rem;display:grid;grid-gap:1rem;\"]); //Query to pass token to backend stripe funcitonality\n\n_c = CheckoutFormStyles;\nvar CREATE_ORDER_MUTATION = gql(_templateObject()); //Using Stripe library to perform live transactions\n//Loading stripe functionality\n\nvar stripeLib = loadStripe(process.env.NEXT_PUBLIC_STRIPE_KEY); //Checkout Form\n\nfunction CheckoutForm() {\n  _s();\n\n  var _useState = useState(false),\n      error = _useState[0],\n      setError = _useState[1];\n\n  var _useState2 = useState(false),\n      loading = _useState2[0],\n      setLoading = _useState2[1]; //Loading stripe method\n\n\n  var stripe = useStripe(); //stripe api card elements\n\n  var elements = useElements(); //Using query to pass token\n\n  var _useMutation = useMutation(CREATE_ORDER_MUTATION, {\n    refetchQueries: [{\n      query: CURRENT_USER_QUERY\n    }]\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      checkout = _useMutation2[0],\n      graphQLError = _useMutation2[1].error;\n\n  var router = useRouter();\n\n  var _useCart = useCart(),\n      closeCart = _useCart.closeCart;\n\n  function handleSubmit(_x) {\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  function _handleSubmit() {\n    _handleSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var _yield$stripe$createP, error, paymentMethod, order;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              setLoading(true); //Indicate page loading animation\n\n              nProgress.start(); //Creating stripe payment method, will return error or success token\n\n              _context.next = 5;\n              return stripe.createPaymentMethod({\n                type: 'card',\n                card: elements.getElement(CardElement)\n              });\n\n            case 5:\n              _yield$stripe$createP = _context.sent;\n              error = _yield$stripe$createP.error;\n              paymentMethod = _yield$stripe$createP.paymentMethod;\n              console.log(paymentMethod);\n\n              if (!error) {\n                _context.next = 13;\n                break;\n              }\n\n              setError(error);\n              nProgress.done();\n              return _context.abrupt(\"return\");\n\n            case 13:\n              _context.next = 15;\n              return checkout({\n                variables: {\n                  token: paymentMethod.id\n                }\n              });\n\n            case 15:\n              order = _context.sent;\n              //Redirecting page to order complete\n              router.push({\n                pathname: '/order',\n                query: {\n                  id: order.data.checkout.id\n                }\n              }); //Loading completed, ending transition animation\n\n              closeCart();\n              setLoading(false);\n              nProgress.done();\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/_jsxDEV(CheckoutFormStyles, {\n    onSubmit: handleSubmit,\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 23\n    }, this), graphQLError && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: graphQLError.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 30\n    }, this), /*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SickButton, {\n      children: \"Checkout Now\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n} //Component containing stripe provider wrapper\n//Have it separately in order for Checkout Form to use useStripe() method\n\n\n_s(CheckoutForm, \"wlU1Cbh83/yFSw22SKCztykkVbA=\", false, function () {\n  return [useStripe, useElements, useMutation, useRouter, useCart];\n});\n\n_c2 = CheckoutForm;\n\nfunction Checkout() {\n  return /*#__PURE__*/_jsxDEV(Elements, {\n    stripe: stripeLib,\n    children: /*#__PURE__*/_jsxDEV(CheckoutForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this);\n}\n\n_c3 = Checkout;\nexport { Checkout };\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"CheckoutFormStyles\");\n$RefreshReg$(_c2, \"CheckoutForm\");\n$RefreshReg$(_c3, \"Checkout\");","map":{"version":3,"sources":["C:/projects/AdvancedReact/frontend/components/Checkout.js"],"names":["styled","loadStripe","CardElement","Elements","useElements","useStripe","SickButton","useState","nProgress","gql","useMutation","useRouter","useCart","CURRENT_USER_QUERY","CheckoutFormStyles","form","CREATE_ORDER_MUTATION","stripeLib","process","env","NEXT_PUBLIC_STRIPE_KEY","CheckoutForm","error","setError","loading","setLoading","stripe","elements","refetchQueries","query","checkout","graphQLError","router","closeCart","handleSubmit","e","preventDefault","start","createPaymentMethod","type","card","getElement","paymentMethod","console","log","done","variables","token","id","order","push","pathname","data","message","Checkout"],"mappings":"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","sourcesContent":["import styled from \"styled-components\";\r\nimport { loadStripe } from '@stripe/stripe-js';\r\nimport { CardElement, Elements, useElements, useStripe } from \"@stripe/react-stripe-js\";\r\nimport SickButton from './styles/SickButton';\r\nimport { useState } from \"react\";\r\nimport nProgress from \"nprogress\";\r\nimport gql from \"graphql-tag\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { useRouter } from \"next/dist/client/router\";\r\nimport { useCart } from \"../lib/cartState\";\r\nimport { CURRENT_USER_QUERY } from \"./User\";\r\n\r\nconst CheckoutFormStyles = styled.form`\r\n    box-shadow: 0 1px 2px 2px rgba(0,0,0,0.4);\r\n    border: 1px solid rgba(0,0,0,.06);\r\n    border-radius: 5px;\r\n    padding: 1rem;\r\n    display: grid;\r\n    grid-gap: 1rem;\r\n`;\r\n\r\n//Query to pass token to backend stripe funcitonality\r\nconst CREATE_ORDER_MUTATION = gql`\r\n    mutation CREATE_ORDER_MUTATION($token: String!) {\r\n        checkout(token: $token){\r\n            id\r\n            charge\r\n            total\r\n            items {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\n//Using Stripe library to perform live transactions\r\n//Loading stripe functionality\r\nconst stripeLib = loadStripe(process.env.NEXT_PUBLIC_STRIPE_KEY);\r\n\r\n//Checkout Form\r\nfunction CheckoutForm() {\r\n    const [error, setError] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    //Loading stripe method\r\n    const stripe = useStripe();\r\n    //stripe api card elements\r\n    const elements = useElements();\r\n    //Using query to pass token\r\n    const [checkout, { error: graphQLError }] = useMutation(CREATE_ORDER_MUTATION, {\r\n        refetchQueries: [{ query: CURRENT_USER_QUERY }]\r\n    });\r\n\r\n    const router = useRouter();\r\n    const { closeCart } = useCart();\r\n\r\n    async function handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        setLoading(true);\r\n\r\n        //Indicate page loading animation\r\n        nProgress.start();\r\n\r\n        //Creating stripe payment method, will return error or success token\r\n        const { error, paymentMethod } = await stripe.createPaymentMethod({\r\n            type: 'card',\r\n            card: elements.getElement(CardElement)\r\n        })\r\n        console.log(paymentMethod)\r\n\r\n        if (error) {\r\n            setError(error);\r\n            nProgress.done();\r\n            return;\r\n        }\r\n\r\n        //Passing token to backend stripe functionality\r\n        const order = await checkout({\r\n            variables: {\r\n                token: paymentMethod.id\r\n            }\r\n        })\r\n\r\n        //Redirecting page to order complete\r\n        router.push({\r\n            pathname: '/order',\r\n            query: { id: order.data.checkout.id }\r\n        });\r\n\r\n        //Loading completed, ending transition animation\r\n        closeCart();\r\n        setLoading(false);\r\n        nProgress.done();\r\n    }\r\n\r\n\r\n    return (\r\n        <CheckoutFormStyles onSubmit={handleSubmit}>\r\n            {error && <p>{error.message}</p>}\r\n            {graphQLError && <p>{graphQLError.message}</p>}\r\n            {/* Stripe Card form */}\r\n            <CardElement></CardElement>\r\n            <SickButton>Checkout Now</SickButton>\r\n        </CheckoutFormStyles>\r\n\r\n    )\r\n}\r\n\r\n//Component containing stripe provider wrapper\r\n//Have it separately in order for Checkout Form to use useStripe() method\r\nfunction Checkout() {\r\n    return (\r\n        <Elements stripe={stripeLib}>\r\n            <CheckoutForm />\r\n        </Elements>\r\n    )\r\n}\r\n\r\nexport { Checkout };"]},"metadata":{},"sourceType":"module"}