{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"C:/projects/AdvancedReact/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"C:/projects/AdvancedReact/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"C:\\\\projects\\\\AdvancedReact\\\\frontend\\\\components\\\\AddToCart.js\",\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation ADD_TO_CART_MUTATION($id: ID!) {\\n        addToCart(productId: $id){\\n            id\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useMutation } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { CURRENT_USER_QUERY } from './User'; //Query that takes product ID and adds the id to cart table\n\nvar ADD_TO_CART_MUTATION = gql(_templateObject()); //Add to cart button that takes in product id as argument\n\nexport default function AddToCart(_ref) {\n  _s();\n\n  var id = _ref.id;\n\n  var _useMutation = useMutation(ADD_TO_CART_MUTATION, {\n    variables: {\n      id: id\n    },\n    refetchQueries: [{\n      query: CURRENT_USER_QUERY\n    }] //refetchQueries updates the apollo client with the new data from mutation so no refresh is required\n\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      addToCart = _useMutation2[0],\n      loading = _useMutation2[1].loading;\n\n  return (\n    /*#__PURE__*/\n    //using loading variable to display indication the application is adding to cart\n    _jsxDEV(\"button\", {\n      disabled: loading,\n      type: \"button\",\n      onClick: addToCart,\n      children: [\"Add\", loading && 'ing', \" To Cart!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this)\n  );\n}\n\n_s(AddToCart, \"0aUF08z5KB1kKj1IAAtYYFUdh4k=\", false, function () {\n  return [useMutation];\n});\n\n_c = AddToCart;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddToCart\");","map":{"version":3,"sources":["C:/projects/AdvancedReact/frontend/components/AddToCart.js"],"names":["useMutation","gql","CURRENT_USER_QUERY","ADD_TO_CART_MUTATION","AddToCart","id","variables","refetchQueries","query","addToCart","loading"],"mappings":";;;;;;;;;;;;;;;;;AACA,SAASA,WAAT,QAA4B,gBAA5B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,kBAAT,QAAmC,QAAnC,C,CAEA;;AACA,IAAMC,oBAAoB,GAAGF,GAAH,mBAA1B,C,CAQA;;AACA,eAAe,SAASG,SAAT,OAA2B;AAAA;;AAAA,MAANC,EAAM,QAANA,EAAM;;AAAA,qBACLL,WAAW,CAACG,oBAAD,EAAuB;AAC/DG,IAAAA,SAAS,EAAE;AAAED,MAAAA,EAAE,EAAEA;AAAN,KADoD;AAE/DE,IAAAA,cAAc,EAAE,CAAC;AAAEC,MAAAA,KAAK,EAAEN;AAAT,KAAD,CAF+C,CAEf;;AAFe,GAAvB,CADN;AAAA;AAAA,MAC/BO,SAD+B;AAAA,MAClBC,OADkB,oBAClBA,OADkB;;AAMtC;AAAA;AACI;AACA;AAAQ,MAAA,QAAQ,EAAEA,OAAlB;AAA2B,MAAA,IAAI,EAAC,QAAhC;AAAyC,MAAA,OAAO,EAAED,SAAlD;AAAA,wBAAiEC,OAAO,IAAI,KAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAIH;;GAVuBN,S;UACaJ,W;;;KADbI,S","sourcesContent":["\r\nimport { useMutation } from \"@apollo/client\"\r\nimport gql from \"graphql-tag\"\r\nimport { CURRENT_USER_QUERY } from './User';\r\n\r\n//Query that takes product ID and adds the id to cart table\r\nconst ADD_TO_CART_MUTATION = gql`\r\n    mutation ADD_TO_CART_MUTATION($id: ID!) {\r\n        addToCart(productId: $id){\r\n            id\r\n        }\r\n    }\r\n`\r\n\r\n//Add to cart button that takes in product id as argument\r\nexport default function AddToCart({ id }) {\r\n    const [addToCart, { loading }] = useMutation(ADD_TO_CART_MUTATION, {\r\n        variables: { id: id },\r\n        refetchQueries: [{ query: CURRENT_USER_QUERY }] //refetchQueries updates the apollo client with the new data from mutation so no refresh is required\r\n    })\r\n\r\n    return (\r\n        //using loading variable to display indication the application is adding to cart\r\n        <button disabled={loading} type=\"button\" onClick={addToCart}>Add{loading && 'ing'} To Cart!</button>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}