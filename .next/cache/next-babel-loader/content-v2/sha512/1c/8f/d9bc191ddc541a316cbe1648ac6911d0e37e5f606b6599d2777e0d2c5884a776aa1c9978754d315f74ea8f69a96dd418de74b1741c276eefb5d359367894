{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\projects\\\\AdvancedReact\\\\frontend\\\\components\\\\Checkout.js\";\nimport styled from \"styled-components\";\nimport { loadStripe } from '@stripe/stripe-js';\nimport { CardElement, Elements, useElements, useStripe } from \"@stripe/react-stripe-js\";\nimport SickButton from './styles/SickButton';\nimport { useState } from \"react\";\nimport nProgress from \"nprogress\";\nimport gql from \"graphql-tag\";\nimport { useMutation } from \"@apollo/client\";\nconst CheckoutFormStyles = styled.form.withConfig({\n  displayName: \"Checkout__CheckoutFormStyles\",\n  componentId: \"sc-10mtoy5-0\"\n})([\"box-shadow:0 1px 2px 2px rgba(0,0,0,0.4);border:1px solid rgba(0,0,0,.06);border-radius:5px;padding:1rem;display:grid;grid-gap:1rem;\"]);\nconst CREATE_ORDER_MUTATION = gql`\n    mutation CREATE_ORDER_MUTATION($token: String!) {\n        checkout(token: $token){\n            id\n            charge\n            total\n            items {\n                id\n                name\n            }\n        }\n    }\n`; //Using Stripe library to perform live transactions\n//Loading stripe functionality\n\nconst stripeLib = loadStripe(process.env.NEXT_PUBLIC_STRIPE_KEY); //Checkout Form\n\nfunction CheckoutForm() {\n  const {\n    0: error,\n    1: setError\n  } = useState(false);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false); //Loading stripe method\n\n  const stripe = useStripe(); //stripe api card elements\n\n  const elements = useElements();\n  const [checkout, {\n    error: graphQLError\n  }] = useMutation(CREATE_ORDER_MUTATION);\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    setLoading(true); //Indicate page loading animation\n\n    nProgress.start(); //Creating stripe payment method, will return error or success token\n\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: elements.getElement(CardElement)\n    });\n    console.log(paymentMethod);\n\n    if (error) {\n      setError(error);\n      nProgress.done();\n      return;\n    } //Loading completed, ending transition animation\n\n\n    setLoading(false);\n    nProgress.done();\n  }\n\n  return /*#__PURE__*/_jsxDEV(CheckoutFormStyles, {\n    onSubmit: handleSubmit,\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 23\n    }, this), graphQLError && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: graphQLError.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 30\n    }, this), /*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SickButton, {\n      children: \"Checkout Now\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n} //Component containing stripe provider wrapper\n//Have it separately in order for Checkout Form to use useStripe() method\n\n\nfunction Checkout() {\n  return /*#__PURE__*/_jsxDEV(Elements, {\n    stripe: stripeLib,\n    children: /*#__PURE__*/_jsxDEV(CheckoutForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n}\n\nexport { Checkout };","map":{"version":3,"sources":["C:/projects/AdvancedReact/frontend/components/Checkout.js"],"names":["styled","loadStripe","CardElement","Elements","useElements","useStripe","SickButton","useState","nProgress","gql","useMutation","CheckoutFormStyles","form","CREATE_ORDER_MUTATION","stripeLib","process","env","NEXT_PUBLIC_STRIPE_KEY","CheckoutForm","error","setError","loading","setLoading","stripe","elements","checkout","graphQLError","handleSubmit","e","preventDefault","start","paymentMethod","createPaymentMethod","type","card","getElement","console","log","done","message","Checkout"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,mBAAnB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,WAAT,EAAsBC,QAAtB,EAAgCC,WAAhC,EAA6CC,SAA7C,QAA8D,yBAA9D;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,MAAMC,kBAAkB,GAAGX,MAAM,CAACY,IAAV;AAAA;AAAA;AAAA,4IAAxB;AASA,MAAMC,qBAAqB,GAAGJ,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAZA,C,CAcA;AACA;;AACA,MAAMK,SAAS,GAAGb,UAAU,CAACc,OAAO,CAACC,GAAR,CAAYC,sBAAb,CAA5B,C,CAEA;;AACA,SAASC,YAAT,GAAwB;AACpB,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBb,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM;AAAA,OAACc,OAAD;AAAA,OAAUC;AAAV,MAAwBf,QAAQ,CAAC,KAAD,CAAtC,CAFoB,CAGpB;;AACA,QAAMgB,MAAM,GAAGlB,SAAS,EAAxB,CAJoB,CAKpB;;AACA,QAAMmB,QAAQ,GAAGpB,WAAW,EAA5B;AAEA,QAAM,CAACqB,QAAD,EAAW;AAAEN,IAAAA,KAAK,EAAEO;AAAT,GAAX,IAAsChB,WAAW,CAACG,qBAAD,CAAvD;;AAEA,iBAAec,YAAf,CAA4BC,CAA5B,EAA+B;AAC3BA,IAAAA,CAAC,CAACC,cAAF;AAEAP,IAAAA,UAAU,CAAC,IAAD,CAAV,CAH2B,CAK3B;;AACAd,IAAAA,SAAS,CAACsB,KAAV,GAN2B,CAQ3B;;AACA,UAAM;AAAEX,MAAAA,KAAF;AAASY,MAAAA;AAAT,QAA2B,MAAMR,MAAM,CAACS,mBAAP,CAA2B;AAC9DC,MAAAA,IAAI,EAAE,MADwD;AAE9DC,MAAAA,IAAI,EAAEV,QAAQ,CAACW,UAAT,CAAoBjC,WAApB;AAFwD,KAA3B,CAAvC;AAIAkC,IAAAA,OAAO,CAACC,GAAR,CAAYN,aAAZ;;AAEA,QAAIZ,KAAJ,EAAW;AACPC,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACAX,MAAAA,SAAS,CAAC8B,IAAV;AACA;AACH,KAnB0B,CAqB3B;;;AACAhB,IAAAA,UAAU,CAAC,KAAD,CAAV;AACAd,IAAAA,SAAS,CAAC8B,IAAV;AACH;;AAGD,sBACI,QAAC,kBAAD;AAAoB,IAAA,QAAQ,EAAEX,YAA9B;AAAA,eACKR,KAAK,iBAAI;AAAA,gBAAIA,KAAK,CAACoB;AAAV;AAAA;AAAA;AAAA;AAAA,YADd,EAEKb,YAAY,iBAAI;AAAA,gBAAIA,YAAY,CAACa;AAAjB;AAAA;AAAA;AAAA;AAAA,YAFrB,eAII,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YAJJ,eAKI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,C,CAED;AACA;;;AACA,SAASC,QAAT,GAAoB;AAChB,sBACI,QAAC,QAAD;AAAU,IAAA,MAAM,EAAE1B,SAAlB;AAAA,2BACI,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;AAED,SAAS0B,QAAT","sourcesContent":["import styled from \"styled-components\";\r\nimport { loadStripe } from '@stripe/stripe-js';\r\nimport { CardElement, Elements, useElements, useStripe } from \"@stripe/react-stripe-js\";\r\nimport SickButton from './styles/SickButton';\r\nimport { useState } from \"react\";\r\nimport nProgress from \"nprogress\";\r\nimport gql from \"graphql-tag\";\r\nimport { useMutation } from \"@apollo/client\";\r\n\r\nconst CheckoutFormStyles = styled.form`\r\n    box-shadow: 0 1px 2px 2px rgba(0,0,0,0.4);\r\n    border: 1px solid rgba(0,0,0,.06);\r\n    border-radius: 5px;\r\n    padding: 1rem;\r\n    display: grid;\r\n    grid-gap: 1rem;\r\n`;\r\n\r\nconst CREATE_ORDER_MUTATION = gql`\r\n    mutation CREATE_ORDER_MUTATION($token: String!) {\r\n        checkout(token: $token){\r\n            id\r\n            charge\r\n            total\r\n            items {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\n//Using Stripe library to perform live transactions\r\n//Loading stripe functionality\r\nconst stripeLib = loadStripe(process.env.NEXT_PUBLIC_STRIPE_KEY);\r\n\r\n//Checkout Form\r\nfunction CheckoutForm() {\r\n    const [error, setError] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    //Loading stripe method\r\n    const stripe = useStripe();\r\n    //stripe api card elements\r\n    const elements = useElements();\r\n\r\n    const [checkout, { error: graphQLError }] = useMutation(CREATE_ORDER_MUTATION);\r\n\r\n    async function handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        setLoading(true);\r\n\r\n        //Indicate page loading animation\r\n        nProgress.start();\r\n\r\n        //Creating stripe payment method, will return error or success token\r\n        const { error, paymentMethod } = await stripe.createPaymentMethod({\r\n            type: 'card',\r\n            card: elements.getElement(CardElement)\r\n        })\r\n        console.log(paymentMethod)\r\n\r\n        if (error) {\r\n            setError(error);\r\n            nProgress.done();\r\n            return;\r\n        }\r\n\r\n        //Loading completed, ending transition animation\r\n        setLoading(false);\r\n        nProgress.done();\r\n    }\r\n\r\n\r\n    return (\r\n        <CheckoutFormStyles onSubmit={handleSubmit}>\r\n            {error && <p>{error.message}</p>}\r\n            {graphQLError && <p>{graphQLError.message}</p>}\r\n            {/* Stripe Card form */}\r\n            <CardElement></CardElement>\r\n            <SickButton>Checkout Now</SickButton>\r\n        </CheckoutFormStyles>\r\n\r\n    )\r\n}\r\n\r\n//Component containing stripe provider wrapper\r\n//Have it separately in order for Checkout Form to use useStripe() method\r\nfunction Checkout() {\r\n    return (\r\n        <Elements stripe={stripeLib}>\r\n            <CheckoutForm />\r\n        </Elements>\r\n    )\r\n}\r\n\r\nexport { Checkout };"]},"metadata":{},"sourceType":"module"}