{"ast":null,"code":"import _regeneratorRuntime from \"C:/projects/AdvancedReact/frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _asyncToGenerator from \"C:/projects/AdvancedReact/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:/projects/AdvancedReact/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"C:/projects/AdvancedReact/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation CREATE_ORDER_MUTATION($token: String!) {\\n        checkout(token: $token){\\n            id\\n            charge\\n            total\\n            items {\\n                id\\n                name\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport styled from \"styled-components\";\nimport { loadStripe } from '@stripe/stripe-js';\nimport { CardElement, Elements, useElements, useStripe } from \"@stripe/react-stripe-js\";\nimport SickButton from './styles/SickButton';\nimport { useState } from \"react\";\nimport nProgress from \"nprogress\";\nimport gql from \"graphql-tag\";\nimport { useMutation } from \"@apollo/client\";\nimport { useRouter } from \"next/dist/client/router\";\nimport { useCart } from \"../lib/cartState\";\nimport { CURRENT_USER_QUERY } from \"./User\";\nvar CheckoutFormStyles = styled.form.withConfig({\n  displayName: \"Checkout__CheckoutFormStyles\",\n  componentId: \"sc-10mtoy5-0\"\n})([\"box-shadow:0 1px 2px 2px rgba(0,0,0,0.4);border:1px solid rgba(0,0,0,.06);border-radius:5px;padding:1rem;display:grid;grid-gap:1rem;\"]); //Query to pass token to backend stripe funcitonality\n\nvar CREATE_ORDER_MUTATION = gql(_templateObject()); //Using Stripe library to perform live transactions\n//Loading stripe functionality\n\nvar stripeLib = loadStripe(process.env.NEXT_PUBLIC_STRIPE_KEY); //Checkout Form\n\nfunction CheckoutForm() {\n  var _useState = useState(false),\n      error = _useState[0],\n      setError = _useState[1];\n\n  var _useState2 = useState(false),\n      loading = _useState2[0],\n      setLoading = _useState2[1]; //Loading stripe method\n\n\n  var stripe = useStripe(); //stripe api card elements\n\n  var elements = useElements(); //Using query to pass token\n\n  var _useMutation = useMutation(CREATE_ORDER_MUTATION, {\n    refetchQueries: [{\n      query: CURRENT_USER_QUERY\n    }]\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      checkout = _useMutation2[0],\n      graphQLError = _useMutation2[1].error;\n\n  var router = useRouter();\n\n  var _useCart = useCart(),\n      closeCart = _useCart.closeCart;\n\n  function handleSubmit(_x) {\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  function _handleSubmit() {\n    _handleSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var _yield$stripe$createP, error, paymentMethod, order;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              setLoading(true); //Indicate page loading animation\n\n              nProgress.start(); //Creating stripe payment method, will return error or success token\n\n              _context.next = 5;\n              return stripe.createPaymentMethod({\n                type: 'card',\n                card: elements.getElement(CardElement)\n              });\n\n            case 5:\n              _yield$stripe$createP = _context.sent;\n              error = _yield$stripe$createP.error;\n              paymentMethod = _yield$stripe$createP.paymentMethod;\n              console.log(paymentMethod);\n\n              if (!error) {\n                _context.next = 13;\n                break;\n              }\n\n              setError(error);\n              nProgress.done();\n              return _context.abrupt(\"return\");\n\n            case 13:\n              _context.next = 15;\n              return checkout({\n                variables: {\n                  token: paymentMethod.id\n                }\n              });\n\n            case 15:\n              order = _context.sent;\n              //Redirecting page to order complete\n              router.push({\n                pathname: '/order/[id]',\n                query: {\n                  id: order.data.checkout.id\n                }\n              }); //Loading completed, ending transition animation\n\n              closeCart();\n              setLoading(false);\n              nProgress.done();\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/_jsxs(CheckoutFormStyles, {\n    onSubmit: handleSubmit,\n    children: [error && /*#__PURE__*/_jsx(\"p\", {\n      children: error.message\n    }), graphQLError && /*#__PURE__*/_jsx(\"p\", {\n      children: graphQLError.message\n    }), /*#__PURE__*/_jsx(CardElement, {}), /*#__PURE__*/_jsx(SickButton, {\n      children: \"Checkout Now\"\n    })]\n  });\n} //Component containing stripe provider wrapper\n//Have it separately in order for Checkout Form to use useStripe() method\n\n\nfunction Checkout() {\n  return /*#__PURE__*/_jsx(Elements, {\n    stripe: stripeLib,\n    children: /*#__PURE__*/_jsx(CheckoutForm, {})\n  });\n}\n\nexport { Checkout };","map":null,"metadata":{},"sourceType":"module"}