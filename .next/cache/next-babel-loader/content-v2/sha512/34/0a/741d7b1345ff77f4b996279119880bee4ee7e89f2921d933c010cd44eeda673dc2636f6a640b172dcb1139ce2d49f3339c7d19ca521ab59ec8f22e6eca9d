{"ast":null,"code":"import { PAGINATION_QUERY } from '../components/Pagination'; //Helper function to perform pagination\n//Code below is to read and merge the paginated data from the database to apollo cache\n//Method used in withData.js\n\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n\n    read(existing = [], {\n      args,\n      cache\n    }) {\n      var _data$_allProductsMet;\n\n      const {\n        skip,\n        first\n      } = args;\n      const data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      const count = data === null || data === void 0 ? void 0 : (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count;\n      const page = skip / first + 1;\n      const pages = Math.ceil(count / first);\n      const items = existing.slice(skip, skip + first).filter(x => x);\n\n      if (items.length && items.length !== first && page === pages) {\n        return items;\n      }\n\n      if (items.length !== first) {\n        return false;\n      }\n\n      if (items.length) {\n        return items;\n      }\n\n      return false;\n    },\n\n    merge(existing, incoming, {\n      args\n    }) {\n      const {\n        skip,\n        first\n      } = args;\n      const merged = existing ? existing.slice(0) : [];\n\n      for (let i = skip; i < skip + incoming.length; ++i) {\n        merged[i] = incoming[i - skip];\n      }\n\n      return merged;\n    }\n\n  };\n}","map":{"version":3,"sources":["C:/projects/AdvancedReact/frontend/lib/paginationField.js"],"names":["PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","skip","first","data","readQuery","query","count","_allProductsMeta","page","pages","Math","ceil","items","slice","filter","x","length","merge","incoming","merged","i"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,0BAAjC,C,CAEA;AACA;AACA;;AACA,eAAe,SAASC,eAAT,GAA2B;AACtC,SAAO;AACHC,IAAAA,OAAO,EAAE,KADN;;AAEHC,IAAAA,IAAI,CAACC,QAAQ,GAAG,EAAZ,EAAgB;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAhB,EAAiC;AAAA;;AACjC,YAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBH,IAAxB;AAEA,YAAMI,IAAI,GAAGH,KAAK,CAACI,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEX;AAAT,OAAhB,CAAb;AAEA,YAAMY,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,gBAAT,0DAAG,sBAAwBD,KAAtC;AAEA,YAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B;AACA,YAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd;AAEA,YAAMU,KAAK,GAAGd,QAAQ,CAACe,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA2CC,CAAD,IAAOA,CAAjD,CAAd;;AAEA,UAAIH,KAAK,CAACI,MAAN,IAAgBJ,KAAK,CAACI,MAAN,KAAiBd,KAAjC,IAA0CM,IAAI,KAAKC,KAAvD,EAA8D;AAC1D,eAAOG,KAAP;AACH;;AAED,UAAIA,KAAK,CAACI,MAAN,KAAiBd,KAArB,EAA4B;AACxB,eAAO,KAAP;AACH;;AAED,UAAIU,KAAK,CAACI,MAAV,EAAkB;AACd,eAAOJ,KAAP;AACH;;AAED,aAAO,KAAP;AACH,KA3BE;;AA4BHK,IAAAA,KAAK,CAACnB,QAAD,EAAWoB,QAAX,EAAqB;AAAEnB,MAAAA;AAAF,KAArB,EAA+B;AAChC,YAAM;AAAEE,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBH,IAAxB;AAEA,YAAMoB,MAAM,GAAGrB,QAAQ,GAAGA,QAAQ,CAACe,KAAT,CAAe,CAAf,CAAH,GAAuB,EAA9C;;AAEA,WAAK,IAAIO,CAAC,GAAGnB,IAAb,EAAmBmB,CAAC,GAAGnB,IAAI,GAAGiB,QAAQ,CAACF,MAAvC,EAA+C,EAAEI,CAAjD,EAAoD;AAChDD,QAAAA,MAAM,CAACC,CAAD,CAAN,GAAYF,QAAQ,CAACE,CAAC,GAAGnB,IAAL,CAApB;AACH;;AAED,aAAOkB,MAAP;AACH;;AAtCE,GAAP;AAwCH","sourcesContent":["import { PAGINATION_QUERY } from '../components/Pagination';\r\n\r\n//Helper function to perform pagination\r\n//Code below is to read and merge the paginated data from the database to apollo cache\r\n//Method used in withData.js\r\nexport default function paginationField() {\r\n    return {\r\n        keyArgs: false,\r\n        read(existing = [], { args, cache }) {\r\n            const { skip, first } = args;\r\n\r\n            const data = cache.readQuery({ query: PAGINATION_QUERY })\r\n\r\n            const count = data?._allProductsMeta?.count;\r\n\r\n            const page = skip / first + 1;\r\n            const pages = Math.ceil(count / first);\r\n\r\n            const items = existing.slice(skip, skip + first).filter((x) => x);\r\n\r\n            if (items.length && items.length !== first && page === pages) {\r\n                return items;\r\n            }\r\n\r\n            if (items.length !== first) {\r\n                return false;\r\n            }\r\n\r\n            if (items.length) {\r\n                return items;\r\n            }\r\n\r\n            return false;\r\n        },\r\n        merge(existing, incoming, { args }) {\r\n            const { skip, first } = args;\r\n\r\n            const merged = existing ? existing.slice(0) : [];\r\n\r\n            for (let i = skip; i < skip + incoming.length; ++i) {\r\n                merged[i] = incoming[i - skip];\r\n            }\r\n\r\n            return merged;\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}