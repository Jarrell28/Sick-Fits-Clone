{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport useForm from '../lib/useForm';\nimport Form from './styles/Form';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/client';\nimport DisplayError from './ErrorMessage';\nimport { ALL_PRODUCTS_QUERY } from './Products';\nimport Router from 'next/router'; //GraphQL query to create new product\n\nconst CREATE_PRODUCT_MUTATION = gql`\n    mutation CREATE_PRODUCT_MUTATION(\n        #which variables are getting passed in and the type\n        $name: String!\n        $description: String!\n        $price: Int!\n        $image: Upload\n    ){\n        createProduct(data:{\n            name: $name,\n            description: $description,\n            price: $price,\n            status: \"AVAILABLE\",\n            photo: {\n                create: {\n                    image: $image,\n                    altText: $name\n                }\n            }\n        }) {\n            id\n            price\n            description\n            name\n        }\n    }\n`; //Component to create new product\n\nexport default function CreateProduct() {\n  //Passing initial values to form inputs\n  const {\n    inputs,\n    handleChange,\n    resetForm,\n    clearForm\n  } = useForm({\n    name: '',\n    price: 0,\n    description: '',\n    image: ''\n  }); //Using mutation hook to create new product\n\n  const [createProduct, {\n    loading,\n    error,\n    data\n  }] = useMutation(CREATE_PRODUCT_MUTATION, {\n    variables: inputs,\n    refetchQueries: [{\n      query: ALL_PRODUCTS_QUERY\n    }] //refetchQueries updates the apollo client with the new data from mutation so no refresh is required\n\n  });\n  return (\n    /*#__PURE__*/\n    //using createProduct function returned by useMutation hook\n    _jsxs(Form, {\n      onSubmit: async e => {\n        e.preventDefault();\n        const res = await createProduct();\n        clearForm(); //After creating product, redirects page to the newly created product \n\n        Router.push({\n          pathname: `/product/${res.data.createProduct.id}`\n        });\n      },\n      children: [/*#__PURE__*/_jsx(DisplayError, {\n        error: error\n      }), /*#__PURE__*/_jsxs(\"fieldset\", {\n        disabled: loading,\n        \"aria-busy\": loading,\n        children: [/*#__PURE__*/_jsxs(\"label\", {\n          htmlFor: \"image\",\n          children: [\"Image: \", /*#__PURE__*/_jsx(\"input\", {\n            type: \"file\",\n            required: true,\n            id: \"image\",\n            name: \"image\",\n            onChange: handleChange\n          })]\n        }), /*#__PURE__*/_jsxs(\"label\", {\n          htmlFor: \"name\",\n          children: [\"Name: \", /*#__PURE__*/_jsx(\"input\", {\n            type: \"text\",\n            id: \"name\",\n            name: \"name\",\n            placeholder: \"Name\",\n            value: inputs.name,\n            onChange: handleChange\n          })]\n        }), /*#__PURE__*/_jsxs(\"label\", {\n          htmlFor: \"price\",\n          children: [\"Price: \", /*#__PURE__*/_jsx(\"input\", {\n            type: \"number\",\n            id: \"price\",\n            name: \"price\",\n            placeholder: \"Price\",\n            value: inputs.price,\n            onChange: handleChange\n          })]\n        }), /*#__PURE__*/_jsxs(\"label\", {\n          htmlFor: \"description\",\n          children: [\"Description: \", /*#__PURE__*/_jsx(\"textarea\", {\n            id: \"description\",\n            name: \"description\",\n            placeholder: \"Description\",\n            value: inputs.description,\n            onChange: handleChange\n          })]\n        }), /*#__PURE__*/_jsx(\"button\", {\n          type: \"submit\",\n          children: \"+ Add Product\"\n        })]\n      })]\n    })\n  );\n}","map":null,"metadata":{},"sourceType":"module"}