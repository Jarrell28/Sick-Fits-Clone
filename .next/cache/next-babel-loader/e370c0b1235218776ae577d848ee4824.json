{"ast":null,"code":"import { PAGINATION_QUERY } from '../components/Pagination';\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n    read: function read() {\n      var _data$_allProductsMet;\n\n      var existing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      var _ref = arguments.length > 1 ? arguments[1] : undefined,\n          args = _ref.args,\n          cache = _ref.cache;\n\n      var skip = args.skip,\n          first = args.first;\n      var data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      var count = data === null || data === void 0 ? void 0 : (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count;\n      var page = skip / first + 1;\n      var pages = Math.ceil(count / first);\n      var items = existing.slice(skip, skip + first).filter(function (x) {\n        return x;\n      });\n\n      if (items.length !== first) {\n        return false;\n      }\n\n      if (items.length) {\n        return items;\n      }\n\n      return false;\n    },\n    merge: function merge(existing, incoming, _ref2) {\n      var args = _ref2.args;\n      var merged = existing ? existing.slice(0) : [];\n    }\n  };\n}","map":{"version":3,"sources":["C:/projects/AdvancedReact/frontend/lib/paginationField.js"],"names":["PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","skip","first","data","readQuery","query","count","_allProductsMeta","page","pages","Math","ceil","items","slice","filter","x","length","merge","incoming","merged"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,0BAAjC;AAEA,eAAe,SAASC,eAAT,GAA2B;AACtC,SAAO;AACHC,IAAAA,OAAO,EAAE,KADN;AAEHC,IAAAA,IAFG,kBAEkC;AAAA;;AAAA,UAAhCC,QAAgC,uEAArB,EAAqB;;AAAA;AAAA,UAAfC,IAAe,QAAfA,IAAe;AAAA,UAATC,KAAS,QAATA,KAAS;;AAAA,UACzBC,IADyB,GACTF,IADS,CACzBE,IADyB;AAAA,UACnBC,KADmB,GACTH,IADS,CACnBG,KADmB;AAGjC,UAAMC,IAAI,GAAGH,KAAK,CAACI,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEX;AAAT,OAAhB,CAAb;AAEA,UAAMY,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,gBAAT,0DAAG,sBAAwBD,KAAtC;AAEA,UAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B;AACA,UAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd;AAEA,UAAMU,KAAK,GAAGd,QAAQ,CAACe,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA0C,UAACC,CAAD;AAAA,eAAOA,CAAP;AAAA,OAA1C,CAAd;;AACA,UAAIH,KAAK,CAACI,MAAN,KAAiBd,KAArB,EAA4B;AACxB,eAAO,KAAP;AACH;;AAED,UAAIU,KAAK,CAACI,MAAV,EAAkB;AACd,eAAOJ,KAAP;AACH;;AAED,aAAO,KAAP;AACH,KAtBE;AAuBHK,IAAAA,KAvBG,iBAuBGnB,QAvBH,EAuBaoB,QAvBb,SAuBiC;AAAA,UAARnB,IAAQ,SAARA,IAAQ;AAChC,UAAMoB,MAAM,GAAGrB,QAAQ,GAAGA,QAAQ,CAACe,KAAT,CAAe,CAAf,CAAH,GAAuB,EAA9C;AAEH;AA1BE,GAAP;AA4BH","sourcesContent":["import { PAGINATION_QUERY } from '../components/Pagination';\r\n\r\nexport default function paginationField() {\r\n    return {\r\n        keyArgs: false,\r\n        read(existing = [], { args, cache }) {\r\n            const { skip, first } = args;\r\n\r\n            const data = cache.readQuery({ query: PAGINATION_QUERY })\r\n\r\n            const count = data?._allProductsMeta?.count;\r\n\r\n            const page = skip / first + 1;\r\n            const pages = Math.ceil(count / first);\r\n\r\n            const items = existing.slice(skip, skip + first).filter((x) => x);\r\n            if (items.length !== first) {\r\n                return false;\r\n            }\r\n\r\n            if (items.length) {\r\n                return items;\r\n            }\r\n\r\n            return false;\r\n        },\r\n        merge(existing, incoming, { args }) {\r\n            const merged = existing ? existing.slice(0) : []\r\n\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}